<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-31T23:10:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HyoLog</title><subtitle>Artificial Intelligence trends and concepts made easy.</subtitle><author><name>hyobbeee</name></author><entry><title type="html">for문과 while문의 차이</title><link href="http://localhost:4000/for%EB%AC%B8%EA%B3%BC-while%EB%AC%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4.html" rel="alternate" type="text/html" title="for문과 while문의 차이" /><published>2023-01-30T00:00:00+09:00</published><updated>2023-01-30T00:00:00+09:00</updated><id>http://localhost:4000/for%EB%AC%B8%EA%B3%BC%20while%EB%AC%B8%EC%9D%98%20%EC%B0%A8%EC%9D%B4</id><content type="html" xml:base="http://localhost:4000/for%EB%AC%B8%EA%B3%BC-while%EB%AC%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4.html"><![CDATA[<h3 id="정리-사유">🎃 정리 사유</h3>

<p>알고리즘 문제 풀이 중 while문으로 완료했는데 레퍼런스에는 for문으로 구현되어 있어 어떤 상황에 사용하는지 정확하게 구별해서 사용하기 위해 정리해보았습니다.</p>

<h1 id="for-문">📍for 문</h1>

<p>이전에도 정리를 한 적 있지만 다시 쉽게 정리해보자면</p>

<p><strong>반복 횟수를 알고 있을 경우 주로 사용한다.</strong></p>

<p><img src="https://www.notion.so/hyobbeee/for-while-add2458f76c44896871fded4a039ec3c#c69a08d3c0294d9f92f87993243d8390" alt="for문 구조" /></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span> <span class="c1">// 10</span>
</code></pre></div></div>

<h1 id="while-문">📍while 문</h1>

<p>for문이 정해진 횟수만큼 반복한다면,</p>

<p><strong>while문은 조건식이 true일 경우 계속해서 반복한다.</strong></p>

<p>조건식에는 비교 또는 논리 연산식이 주로 오는데, for문과 마찬가지로 조건식이 false 일경우 실행 종료.</p>

<p><img src="https://www.notion.so/hyobbeee/for-while-add2458f76c44896871fded4a039ec3c#74aee6942e9b428b85c2de8e7e7c4660" alt="while문 구조" /></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 합을 저장할 변수</span>
<span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 카운터 변수</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">sum</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
	<span class="nx">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span> <span class="c1">// 10</span>
</code></pre></div></div>

<h2 id="️for-문과-while-문의-차이점">⚙️ for 문과 while 문의 차이점</h2>

<table>
  <thead>
    <tr>
      <th>for 문을 사용하는 경우</th>
      <th>while 문을 사용하는 경우</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1. 반복 횟수가 정해진 경우 <br /> 2. 배열과 함께 주로 많이 사용</td>
      <td>1. 무한 루프나 특정 조건에 만족할 때까지 반복해야하는 경우<br />2. 주로 파일을 읽고 쓰기에 많이 사용</td>
    </tr>
  </tbody>
</table>

<h1 id="do-while-문">📍do-while 문</h1>

<p>조건에 따라 반복을 할지 계속할지를 결정할 때 사용하는 것은 while문과 동일</p>

<p><strong>하지만, 무조건 중괄호 블럭을 한번 실행하고 조건을 검사하여 반복을 결정한다.</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">do</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
	<span class="nx">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">);</span>
</code></pre></div></div>

<p>while문과 do-while문의 차이점은 조건을 먼저 검사하느냐 나중에 검사하느냐일 뿐 동작 방식은 동일하다.</p>

<h1 id="continue-문">📍continue 문</h1>

<p>for문, while문, do-while문에서 사용하며, for문에서 continue를 만나게 되면 증감식으로 바로 이동하게 되며, 나머지는 조건식으로 이동하게 만든다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 2로 나눈 나머지가 0이 아닌경우(=홀수인 경우)</span>
		<span class="k">continue</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 홀수는 출력 되지 않음</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>hyobbeee</name></author><category term="TIL" /><category term="JavaScript" /><summary type="html"><![CDATA[깃 블로그 만드는거 왜이렇게 어려워요.]]></summary></entry><entry><title type="html">node.js / 3rd-party 모듈</title><link href="http://localhost:4000/3rd-party-module.html" rel="alternate" type="text/html" title="node.js / 3rd-party 모듈" /><published>2023-01-24T00:00:00+09:00</published><updated>2023-01-24T00:00:00+09:00</updated><id>http://localhost:4000/3rd-party-module</id><content type="html" xml:base="http://localhost:4000/3rd-party-module.html"><![CDATA[<ul>
  <li>학습목표
    <ul>
      <li>Node.js 내장 모듈을 사용할 수 있다.</li>
      <li>서드 파티 모듈 (3rd-party module)을 활용할 수 있다.</li>
      <li>Node.js 공식 문서를 활용하여 <code class="language-plaintext highlighter-rouge">fs.readFile</code>을 이용할 수 있다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>
<h1 id="nodejs">Node.js</h1>

<h2 id="개념">📍개념</h2>

<p>Node.js는 Chrome V8 JavaScript 엔진으로 빌드 된 JavaScript 런타임이다.
즉, 노드를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있으며, 서버를 실행하는데 많이 이용됨.</p>
<aside>
  🎃 자신이 이해하는 범위만큼 모듈을 쓸 수 있음..
</aside>

<h2 id="사용법">📍사용법</h2>

<p>파일을 읽을 때 : <code class="language-plaintext highlighter-rouge">readFile</code> 이라는 메서드</p>

<p>파일을 저장할 때 : <code class="language-plaintext highlighter-rouge">writeFile</code> 이라는 메서드(<code class="language-plaintext highlighter-rouge">saveFile</code> 메서드를 써야할 것 같지만 없음)</p>

<p>모든 모듈은 ‘모듈을 사용하기 위해 불러오는 과정’이 필요</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">불러오고싶은_스크립트.js</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Node.js 에서는 javascript 코드 가장 상단에 <code class="language-plaintext highlighter-rouge">require</code> 구문을 이용해 다른 파일을 불러옴</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 파일 시스템 모듈 호출</span>
<span class="kd">const</span> <span class="nx">dns</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dns</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// DNS 모듈 호출</span>

<span class="c1">// 호출 후 fs.readFile 메서드 등을 사용 가능</span>
</code></pre></div></div>
<p><br /></p>
<h1 id="3rd-party-모듈을-사용하는-법">3rd-party 모듈을 사용하는 법</h1>

<h2 id="개념-1">📍개념</h2>

<p>해당 프로그래밍 언어에서 공식적으로 제공하는 빌트인 모듈이 아닌 모든 외부 모듈을 일컫는다.</p>

<h2 id="사용법-1">📍사용법</h2>

<p>예시로 <code class="language-plaintext highlighter-rouge">underscore</code>이 있는데 Node.js 공식문서에 없는 모듈이어서 서드파티 모듈임 → 다운을 위해선 npm 사용해야함</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">underscore</span>
</code></pre></div></div>

<p>이후 Node.js 내장 모듈을 사용하듯 <code class="language-plaintext highlighter-rouge">require</code> 구문을 통해 호출 가능</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">underscore</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>
<p><br /></p>
<h1 id="공식-문서-읽는법">공식 문서 읽는법</h1>

<h2 id="fsreadfilepath-options-callback">fs.readFile(path[, options], callback)</h2>

<p>메서드 <code class="language-plaintext highlighter-rouge">fs.readFile</code>은 <strong>비동기적</strong>으로 파일 내용 전체를 읽는다.</p>

<h3 id="---path--string--buffer--url--integer">-  path : &lt;string&gt; | &lt;Buffer&gt; | &lt;URL&gt; | &lt;integer&gt;</h3>

<p>path에는 파일이름을 전달인자로 받는데, 네 가지 종류의 타입을 넘길 수 있지만 일반적으로 문자열 타입 사용</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/passwd</span><span class="dl">'</span><span class="p">,</span> <span class="p">...,</span> <span class="p">...)</span>
</code></pre></div></div>

<h3 id="--options--object--string">- options : &lt;Object&gt; | &lt;string&gt;</h3>

<p>대괄호로 감싼 두번째 전달인자는 선택적 전달인자를 의미함</p>

<p>options은 문자열 또는 객체 형태로 받을 수 있다.</p>

<p>문자열로 전달할 경우 인코딩을 받음.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// /etc/passwd 파일을 'utf8'을 사용하여 읽습니다.</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/passwd</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="p">...);</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">encoding</span><span class="p">:</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// utf8 인코딩 방식으로 엽니다</span>
  <span class="na">flag</span><span class="p">:</span> <span class="dl">'</span><span class="s1">r</span><span class="dl">'</span> <span class="c1">// 읽기 위해 엽니다</span>
<span class="p">}</span>

<span class="c1">// /etc/passwd 파일을 options를 사용하여 읽습니다.</span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">/etc/passwd</span><span class="dl">'</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div></div>

<h3 id="--callback-function">- callback &lt;Function&gt;</h3>

<p>마지막인자는 콜백함수를 전달함. 파일을 읽고 난 후 비동기적으로 실행되는 함수</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">err</code> &lt;Error&gt; | &lt;AggregateError&gt;</li>
  <li><code class="language-plaintext highlighter-rouge">data</code> &lt;string&gt; | &lt;Buffer&gt;</li>
</ul>

<p>콜백함수에는 두가지 매개변수 있는데, 에러 발생하지 않으면 <code class="language-plaintext highlighter-rouge">err</code>은 <code class="language-plaintext highlighter-rouge">null</code>이 되며, <code class="language-plaintext highlighter-rouge">data</code>에 문자열이나 <code class="language-plaintext highlighter-rouge">Buffer</code> 라는 객체가 전달됨.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">test.txt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="c1">// 에러를 던집니다.</span>
  <span class="p">}</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>]]></content><author><name>hyobbeee</name></author><category term="TIL" /><category term="JavaScript" /><summary type="html"><![CDATA[학습목표 Node.js 내장 모듈을 사용할 수 있다. 서드 파티 모듈 (3rd-party module)을 활용할 수 있다. Node.js 공식 문서를 활용하여 fs.readFile을 이용할 수 있다.]]></summary></entry><entry><title type="html">TIL START</title><link href="http://localhost:4000/TIL-Start.html" rel="alternate" type="text/html" title="TIL START" /><published>2023-01-23T00:00:00+09:00</published><updated>2023-01-23T00:00:00+09:00</updated><id>http://localhost:4000/TIL-Start</id><content type="html" xml:base="http://localhost:4000/TIL-Start.html"><![CDATA[<h3 id="til-블로그-입니다">TIL 블로그 입니다.</h3>

<p>안녕하세요. github 블로그 만들기 힘드네요.
재업로드입니다….</p>

<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse</p>]]></content><author><name>hyobbeee</name></author><category term="TIL" /><summary type="html"><![CDATA[깃 블로그 만드는거 왜이렇게 어려워요.]]></summary></entry><entry><title type="html">Conway’s Game of Life</title><link href="http://localhost:4000/conways-game-of-life.html" rel="alternate" type="text/html" title="Conway’s Game of Life" /><published>2021-02-11T04:32:20+09:00</published><updated>2021-02-11T04:32:20+09:00</updated><id>http://localhost:4000/conways-game-of-life</id><content type="html" xml:base="http://localhost:4000/conways-game-of-life.html"><![CDATA[<p>I&nbsp;am lately trying to take on coding again. It had always been a part of my life since my early years when I&nbsp;learned to program a Tandy Color Computer at the age of 8, the good old days.</p>

<p><img src="./assets/img/posts/20210210/300px-TRS-80_Color_Computer_3.jpg" alt="Tandy Color Computer TRS80 III" /><small>Tandy Color Computer TRS80 III</small></p>

<p>Having already programed in Java, C# and of course BASIC, I&nbsp;thought it would be a great idea to learn Python since I&nbsp;have great interest in data science and machine learning, and those two topics seem to have an avid community within Python coders.</p>

<p>For one of my starter quick programming tasks, I&nbsp;decided to code Conway's Game of Life, a very simple cellular automata that basically plays itself.</p>

<p>The game consists of a grid of n size, and within each block of the grid a cell could either be dead or alive according to these rules:</p>

<ul><li>If a cell has less than 2 neighbors, meaning contiguous alive cells, the cell will die of loneliness</li><li>If a cell has more than 3 neighbors, it will die of overpopulation</li><li>If an empty block has exactly 3 contiguous alive neighbors, a new cell will be born in that spot</li><li>If an alive cell has 2 or 3 alive neighbors, it continues to live</li></ul>

<p><img src="./assets/img/posts/20210210/GameOfLife.gif" alt="Conway's rules for the Game of Life" /><small>Conway’s rules for the Game of Life</small></p>

<p>To make it more of a challenge I&nbsp;also decided to implement an <em>"sparse" </em>method of recording the game board, this means that instead of the typical 2d array representing the whole board, I&nbsp;will only record the cells which are alive. Saving a lot of memory space and processing time, while adding some spice to the challenge.</p>

<p>The trickiest part was figuring out how to calculate which empty blocks had exactly 3 alive neighbors so that a new cell will spring to life there, this is trivial in the case of recording the whole grid, because we just iterate all over the board and find the alive neighbors of ALL&nbsp;the blocks in the grid, but in the case of only keeping the alive cells proved quite a challenge.</p>

<p>In the end the algorithm ended up as follows:</p>

<ol><li>Iterate through all the alive cells and get all of their neighbors</li></ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_neighbors</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cell</span><span class="p">):</span>
    <span class="n">neighbors</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
                <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="p">(</span><span class="n">cell</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">size_x</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="p">(</span><span class="n">cell</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">size_y</span><span class="p">):</span>
                    <span class="n">neighbors</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">cell</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="n">cell</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">neighbors</span>
</code></pre></div></div>

<ol start="2"><li>Mark all the neighboring blocks as having +1 neighbor each time a particular cell is encountered. This way, for each neighboring alive cell the counter of the particular block will increase, and in the end it will contain the total number of live cells which are contiguous to it.</li></ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">next_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">alive_neighbors</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">cell</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">alive_cells</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">cell</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">alive_neighbors</span><span class="p">:</span>
            <span class="n">alive_neighbors</span><span class="p">[</span><span class="n">cell</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="n">neighbors</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_neighbors</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">neighbors</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">neighbor</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">alive_neighbors</span><span class="p">:</span>
                <span class="n">alive_neighbors</span><span class="p">[</span><span class="n">neighbor</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">alive_neighbors</span><span class="p">[</span><span class="n">neighbor</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>The trick was using a dictionary to keep the record of the blocks that have alive neighbors and the cells who are alive in the current state but have zero alive neighbors (thus will die).</p>

<p>With the dictionary it became easy just to add cells and increase their neighbor counter each time it was encountered as a neighbor of an alive cell.</p>

<p>Having the dictionary now filled with all the cells that have alive neighbors and how many they have, it was just a matter of applying the rules of the game:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">cell</span> <span class="ow">in</span> <span class="n">alive_neighbors</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">alive_neighbors</span><span class="p">[</span><span class="n">cell</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span> <span class="ow">or</span> <span class="n">alive_neighbors</span><span class="p">[</span><span class="n">cell</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">alive_cells</span><span class="p">.</span><span class="n">discard</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
    
    <span class="k">elif</span> <span class="n">alive_neighbors</span><span class="p">[</span><span class="n">cell</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">alive_cells</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span>
</code></pre></div></div>

<p>Notice that since I am keeping an array of the coordinates of only the cells who are alive, I could apply just 3 rules, die of loneliness, die of overpopulation and become alive from reproduction (exactly 3 alive neighbors) because the ones who have 2 or 3 neighbors and are already alive, can remain alive in the next iteration.</p>

<p>I&nbsp;found it very interesting to implement the Game of Life like this, it was quite a refreshing challenge and I am beginning to feel my coding skills ramping up again.</p>]]></content><author><name>Armando Maynez</name></author><category term="coding" /><category term="python" /><summary type="html"><![CDATA[Taking on the challenge of picking up coding again through interesting small projects, this time it is the turn of Conway's Game of Life.]]></summary></entry><entry><title type="html">Single Neuron Perceptron</title><link href="http://localhost:4000/single-neuron-perceptron.html" rel="alternate" type="text/html" title="Single Neuron Perceptron" /><published>2021-01-26T04:32:20+09:00</published><updated>2021-01-26T04:32:20+09:00</updated><id>http://localhost:4000/single-neuron-perceptron</id><content type="html" xml:base="http://localhost:4000/single-neuron-perceptron.html"><![CDATA[<p>As an entry point to learning python and getting into Machine Learning, I decided to code from scratch the Hello World! of the field, a single neuron perceptron.</p>

<h2 id="what-is-a-perceptron">What is a perceptron?</h2>

<p>A perceptron is the basic building block of a neural network, it can be compared to a neuron, And its conception is what detonated the vast field of Artificial Intelligence nowadays.</p>

<p>Back in the late 1950’s, a young <a href="https://en.wikipedia.org/wiki/Frank_Rosenblatt">Frank Rosenblatt</a> devised a very simple algorithm as a foundation to construct a machine that could learn to perform different tasks.</p>

<p>In its essence, a perceptron is nothing more than a collection of values and rules for passing information through them, but in its simplicity lies its power.</p>

<center><img src="./assets/img/posts/20210125/Perceptron.png" /></center>

<p>Imagine you have a ‘neuron’ and to ‘activate’ it, you pass through several input signals, each signal connects to the neuron through a synapse, once the signal is aggregated in the perceptron, it is then passed on to one or as many outputs as defined. A perceptron is but a neuron and its collection of synapses to get a signal into it and to modify a signal to pass on.</p>

<p>In more mathematical terms, a perceptron is an array of values (let’s call them weights), and the rules to apply such values to an input signal.</p>

<p>For instance a perceptron could get 3 different inputs as in the image, lets pretend that the inputs it receives as signal are: $x_1 = 1, \; x_2 = 2\; and \; x_3 = 3$, if it’s weights are $w_1 = 0.5,\; w_2 = 1\; and \; w_3 = -1$ respectively, then what the perceptron will do when the signal is received is to multiply each input value by its corresponding weight, then add them up.</p>

<p style="text-align:center">\(<br />
\begin{align}
\begin{split}
\left(x_1 * w_1\right) + \left(x_2 * w_2\right) + \left(x_3 * w_3\right)
\end{split}
\end{align}
\)</p>

<p style="text-align:center">\(<br />
\begin{align}<br />
\begin{split}<br />
\left(0.5 * 1\right) + \left(1 * 2\right) + \left(-1 * 3\right) = 0.5 + 2 - 3 = -0.5
\end{split}<br />
\end{align}<br />
\)</p>

<p>Typically when this value is obtained, we need to apply an “activation” function to smooth the output, but let’s say that our activation function is linear, meaning that we keep the value as it is, then that’s it, that is the output of the perceptron, -0.5.</p>

<p>In a practical application, the output means something, perhaps we want our perceptron to classify a set of data and if the perceptron outputs a negative number, then we know the data is of type A, and if it is a positive number then it is of type B.</p>

<p>Once we understand this, the magic starts to happen through a process called backpropagation, where we “educate” our tiny one neuron brain to have it learn how to do its job.</p>

<tweet>The magic starts to happen through a process called backpropagation, where we "educate" our tiny one neuron brain to have it learn how to do its job.</tweet>

<p>For this we need a set of data that it is already classified, we call this a training set. This data has inputs and their corresponding correct output. So we can tell the little brain when it misses in its prediction, and by doing so, we also adjust the weights a bit in the direction where we know the perceptron committed the mistake hoping that after many iterations like this the weights will be so that most of the predictions will be correct.</p>

<p>After the model trains successfully we can have it classify data it has never seen before, and we have a fairly high confidence that it will do so correctly.</p>

<p>The math behind this magical property of the perceptron is called gradient descent, and is just a bit of differential calculus that helps us convert the error the brain is having into tiny nudges of value of the weights towards their optimum. <a href="https://www.youtube.com/watch?v=aircAruvnKk&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi">This video series by 3 blue 1 brown explains it wonderfuly.</a></p>

<p>My program creates a single neuron neural network tuned to guess if a point is above or below a randomly generated line and generates a visualization based on graphs to see how the neural network is learning through time.</p>

<p>The neuron has 3 inputs and weights to calculate its output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input 1 is the X coordinate of the point,
Input 2 is the y coordinate of the point,
Input 3 is the bias and it is always 1

Input 3 or the bias is required for lines that do not cross the origin (0,0)
</code></pre></div></div>

<p>The Perceptron starts with weights all set to zero and learns by using 1,000 random points per each iteration.</p>

<p>The output of the perceptron is calculated with the following activation function:
    if x * weight_x + y weight_y + weight_bias is positive then 1 else 0</p>

<p>The error for each point is calculated as the expected outcome of the perceptron minus the real outcome therefore there are only 3 possible error values:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Expected</th>
      <th style="text-align: center">Calculated</th>
      <th style="text-align: center">Error</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">-1</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">-1</td>
      <td style="text-align: center">-1</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">-1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">-1</td>
    </tr>
  </tbody>
</table>

<p>With every point that is learned if the error is not 0 the weights are adjusted according to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>New_weight = Old_weight + error * input * learning_rate
for example: New_weight_x = Old_weight_x + error * x * learning rate
</code></pre></div></div>

<p>A very useful parameter in all of neural networks is teh learning rate, which is basically a measure on how tiny our nudge to the weights is going to be.</p>

<p>In this particular case, I coded the learning_rate to decrease with every iteration as follows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>learning_rate = 0.01 / (iteration + 1)
</code></pre></div></div>

<p>this is important to ensure that once the weights are nearing the optimal values the adjustment in each iteration is subsequently more subtle.</p>

<center><img src="./assets/img/posts/20210125/Learning_1000_points_per_iteration.jpg" /></center>

<p>In the end, the perceptron always converges into a solution and finds with great precision the line we are looking for.</p>

<p>Perceptrons are quite a revelation in that they can resolve equations by learning, however they are very limited. By their nature they can only resolve linear equations, so their problem space is quite narrow.</p>

<p>Nowadays the neural networks consist of combinations of many perceptrons, in many layers, and other types of “neurons”, like convolution, recurrent, etc. increasing significantly the types of problems they solve.</p>]]></content><author><name>Armando Maynez</name></author><category term="machine learning" /><category term="coding" /><category term="neural networks" /><summary type="html"><![CDATA[Single neuron perceptron that classifies elements learning quite quickly.]]></summary></entry></feed>